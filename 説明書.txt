1. 概要
このツールは、パソコンをランサムウェアの脅威から守るためのリアルタイム監視システムだ。
従来のセキュリティソフトが「既知の脅威」や「危険なファイル」を探すことに特化しているのに対し、このツールは「不審な行動」を多角的に検知することに重点を置いている。これにより、まだ誰も知らない新しいランサムウェアや、ファイルに痕跡を残さない高度な攻撃も、その不審な振る舞いから早い段階で発見し、防御することが可能だ。
具体的には、不自然なファイル名の変更だけでなく、以下の振る舞いを監視する。
プロセスの異常な動き: プログラムが普段と違う動きをしていないか、正規のツールが悪用されていないかなどを監視する。
メモリ内の不審な活動: メモリの内部構造（ヒープメタデータ）を直接分析し、ファイルに残らない高度な攻撃の痕跡を見つけ出す。
このアプローチにより、本ツールは、従来のセキュリティソフトをすり抜ける可能性のある脅威に対して、もう一段階上の防御を提供している。


2. この作品の新しい点と検出方法
本ツールは、複数の先進的な技術と独自のアイデアを組み合わせることで、従来のセキュリティツールにはないアプローチを実現している。その核となるのが、以下の検出方法だ。

ファイルシステム監視 (File System Monitoring)
この機能は、静的なファイルチェックではなく、OSのネイティブAPIを介してイベント駆動型でファイルやディレクトリの変更を捕捉する。watchdogライブラリは、OSレベルのイベントを捕捉し、アプリケーションに非同期で通知する役割を担う。通知を受け取った本ツールのロジックが、変更されたファイルの拡張子が、設定ファイルconfig.jsonに定義されたransomware_extensions（例：.lock, .encrypted）に一致するかを照合し、ランサムウェアによる暗号化の試みと判断した場合に警告を発する。

プロセス動的分析 (Process Dynamic Analysis)
Pythonのpsutilライブラリを使用し、実行中のプロセスの詳細な情報を継続的に分析する。
不審なプロセス関係の検知: 親プロセス情報を取得し、config.jsonのsuspicious_parent_child_relationsで定義されたルール（例：explorer.exeからpowershell.exeが起動された場合など）に違反していないかをチェックする。
コマンドライン引数の分析: プロセスが実行された際のコマンドライン引数に、悪意のあるキーワード（例：-encodedcommand, iex）が含まれていないかを照合する。
不審な実行パスの検知: プロセスの実行ファイルパスが、config.jsonのsuspicious_exe_path_keywordsに設定された不審なディレクトリ（例：Temp, ProgramData）から起動されていないかをチェックする。

新技術：ヒープメタデータ監視 (Heap Metadata Monitoring)
本ツールの最も革新的な技術の一つが、メモリ内攻撃の検知である。この手法は、従来のファイルやネットワーク通信を監視する手法とは一線を画し、攻撃がメモリ上で直接行われるファイルレス攻撃に対応するために開発された。
技術: Pythonのpsutilライブラリのmemory_maps()機能を使用する。この機能は、各プロセスが使用しているメモリ空間（ヒープ、スタック、データセクションなど）の詳細な情報を提供する。本ツールは、特にヒープ領域の動的な振る舞いに着目する。

検知ロジック:
ベースラインの構築: ツール起動後、設定ファイルconfig.jsonのheap_baseline_learning_period_secondsで指定された期間、各プロセスのヒープサイズとメモリマップの変化を計測し、正規の挙動として統計的なベースラインを構築する。
異常検知: ベースライン構築後、監視中のプロセスのヒープサイズが急激に増加するか、あるいは不自然なメモリ領域が確保されていないかを継続的にチェックする。
トリガー: ヒープサイズがheap_deviation_thresholdで設定された閾値（例：ベースラインの1.5倍など）を一時的にでも超えた場合、これはヒープスプレー、ヒープオーバーフロー、あるいはシェルコードのインジェクションといった高度な攻撃手法が試みられている兆候であると判断し、警告を生成する。
この技術は、ファイルにペイロード（攻撃コード）を残さず、メモリ上で悪意のある活動を行う「ファイルレス攻撃」を捕捉するための重要な防御層を形成する。


3. 動作環境と使い方
本ツールを実行するには、Pythonといくつかのライブラリが必要である。
必要なライブラリのインストール:
コマンドプロンプトで以下のコマンドを実行し、依存ライブラリをインストールすること。
PowerShell
"pip install flet psutil watchdog plyer pefile requests"
実行方法（管理者権限が必須）:
すべてのプロセスを正確に監視するため、管理者権限で実行する必要がある。
スタートメニューを右クリックし、「Windows PowerShell (管理者)」または「コマンドプロンプト (管理者)」を選択する。

main.pyがあるフォルダに移動し、以下のコマンドで実行する。
PowerShell
"python main.py"
実行すると、ツールのGUI画面が表示される。

設定の変更:
config.jsonファイルを編集することで、検出ルールを変更できる。
ransomware_extensions: 監視するランサムウェアの拡張子を追加・削除できる。
suspicious_processes: 監視対象とする不審なプロセス名を追加・削除できる。
whitelist: 監視から除外するパス（例：正規のアプリケーション）を設定できる。

※設定変更後は、ツールを再起動して反映させること。


4. トラブルシューティングとFAQ
「アクセス拒否」の警告がたくさん出るのですが何かエラーが発生しているのですか？
これは正常な動作だ。オペレーティングシステムは、セキュリティ上の理由から、一部の特別なシステムプロセスへのアクセスを制限している。本ツールは、アクセスが拒否されてもエラーで止まらないように設計されている。

ログとレポートはどこにありますか？
すべてのログはツールを実行したフォルダ内に自動的に作成されるlogsフォルダに保存される。レポートは、別途reporter.pyを実行することで、reportsフォルダに生成される。